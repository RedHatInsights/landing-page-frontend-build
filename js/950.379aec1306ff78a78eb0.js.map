{"version":3,"sources":["webpack://landing-page-frontend/./src/App.js","webpack://landing-page-frontend/./src/store/index.js"],"names":["Landing","lazy","Maintenance","NotFound","routes","landing","maintenance","PermissionContext","createContext","App","loadTechnologies","useState","isOrgAdmin","setIsOrgAdmin","useEffect","getRegistry","register","technologies","technologiesReducer","activeTechnologies","insights","chrome","init","identifyApp","window","auth","getUser","then","user","identity","is_org_admin","Provider","value","Suspense","fallback","Bullseye","Spinner","size","Switch","Route","exact","path","component","landingBeta","propTypes","history","PropTypes","defaultProps","withRouter","connect","dispatch","technologiesLoaded","middlewareListener","registry","MiddlewareListener","middleware","getMiddleware","promiseMiddleware","notificationsMiddleware","filter","item","notifications"],"mappings":"2RAgBMA,G,SAAUC,WAAK,kBACnB,2EAEIC,GAAcD,WAAK,kBACvB,0DAEIE,GAAWF,WAAK,kBACpB,wDAKIG,EAAS,CACbC,QAAS,IACTC,YAAa,gBAGFC,GAAoBC,qBAE3BC,EAAM,SAAC,GAAyB,IAAvBC,EAAuB,EAAvBA,iBAAuB,GACAC,gBADA,WAC7BC,EAD6B,KACjBC,EADiB,KAapC,OAVAC,gBAAU,YACRC,UAAcC,SAAS,CAAEC,aAAcC,MACvCR,EAAiBS,KACjBC,SAASC,OAAOC,OAChBF,SAASC,OAAOE,YAAY,WAC5BC,OAAOJ,SAASC,OAAOI,KACpBC,UACAC,MAAK,SAACC,GAAD,OAAUA,GAAQf,EAAce,EAAKC,SAASD,KAAKE,oBAI3D,kBAACvB,EAAkBwB,SAAnB,CAA4BC,MAAO,CAAEpB,eACnC,kBAAC,EAAAqB,SAAD,CACEC,SACE,kBAAC,EAAAC,SAAD,KACE,kBAAC,EAAAC,QAAD,CAASC,KAAK,SAIlB,kBAAC,EAAAC,OAAD,KACE,kBAAC,EAAAC,MAAD,CAAOC,OAAK,EAACC,KAAMrC,EAAOC,QAASqC,UAAW1C,IAC9C,kBAAC,EAAAuC,MAAD,CAAOC,OAAK,EAACC,KAAMrC,EAAOuC,YAAaD,UAAW1C,IAClD,kBAAC,EAAAuC,MAAD,CAAOC,OAAK,EAACC,KAAMrC,EAAOE,YAAaoC,UAAWxC,IAClD,kBAAC,EAAAqC,MAAD,CAAOE,KAAK,IAAIC,UAAWvC,QAOrCM,EAAImC,UAAY,CACdC,QAASC,WACTpC,iBAAkBoC,UAGpBrC,EAAIsC,aAAe,CACjBrC,iBAAkB,cAGpB,SAAesC,iBACbC,aAAQ,MAAM,SAACC,GAAD,MAAe,CAC3BxC,iBAAkB,SAACO,GAAD,OAChBiC,GAASC,OAAmBlC,QAFhCgC,CAGIxC,K,kDC3EF2C,EACAC,E,wEAEG,SAAS/B,IACd8B,EAAqB,IAAIE,KADS,2BAAZC,EAAY,yBAAZA,EAAY,gBAUlC,OARAF,GAAWtC,QAAY,GAAD,CACpBqC,EAAmBI,gBACnBC,MACAC,WAHoB,WAIjBH,EAAWI,QAAO,SAACC,GAAD,MAA0B,mBAATA,SAG/B5C,SAAS,CAAE6C,qBACbR","file":"js/950.379aec1306ff78a78eb0.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React, {\n  useEffect,\n  useState,\n  createContext,\n  lazy,\n  Suspense,\n} from 'react';\nimport { withRouter, Switch, Route } from 'react-router-dom';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/files/cjs/Registry';\nimport { connect } from 'react-redux';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport technologiesReducer from './store/technologiesReducer';\nimport { technologiesLoaded } from './store/actions';\nimport { activeTechnologies } from './consts';\n\nconst Landing = lazy(() =>\n  import(/* webpackCunkName: \"Landing\" */ './routes/Landing')\n);\nconst Maintenance = lazy(() =>\n  import(/* webpackCunkName: \"Maintenance\" */ './routes/Maintenance')\n);\nconst NotFound = lazy(() =>\n  import(/* webpackCunkName: \"NotFound\" */ './routes/404')\n);\n\nimport './App.scss';\n\nconst routes = {\n  landing: '/',\n  maintenance: '/maintenance',\n};\n\nexport const PermissionContext = createContext();\n\nconst App = ({ loadTechnologies }) => {\n  const [isOrgAdmin, setIsOrgAdmin] = useState();\n\n  useEffect(() => {\n    getRegistry().register({ technologies: technologiesReducer });\n    loadTechnologies(activeTechnologies);\n    insights.chrome.init();\n    insights.chrome.identifyApp('landing');\n    window.insights.chrome.auth\n      .getUser()\n      .then((user) => user && setIsOrgAdmin(user.identity.user.is_org_admin));\n  });\n\n  return (\n    <PermissionContext.Provider value={{ isOrgAdmin }}>\n      <Suspense\n        fallback={\n          <Bullseye>\n            <Spinner size=\"xl\" />\n          </Bullseye>\n        }\n      >\n        <Switch>\n          <Route exact path={routes.landing} component={Landing} />\n          <Route exact path={routes.landingBeta} component={Landing} />\n          <Route exact path={routes.maintenance} component={Maintenance} />\n          <Route path=\"*\" component={NotFound} />\n        </Switch>\n      </Suspense>\n    </PermissionContext.Provider>\n  );\n};\n\nApp.propTypes = {\n  history: PropTypes.object,\n  loadTechnologies: PropTypes.func,\n};\n\nApp.defaultProps = {\n  loadTechnologies: () => undefined,\n};\n\nexport default withRouter(\n  connect(null, (dispatch) => ({\n    loadTechnologies: (technologies) =>\n      dispatch(technologiesLoaded(technologies)),\n  }))(App)\n);\n","import MiddlewareListener from '@redhat-cloud-services/frontend-components-utilities/files/cjs/MiddlewareListener';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/files/cjs/Registry';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/cjs/notificationsMiddleware';\nimport notifications from '@redhat-cloud-services/frontend-components-notifications/cjs/notifications';\nimport promiseMiddleware from 'redux-promise-middleware';\n\nlet middlewareListener;\nlet registry;\n\nexport function init(...middleware) {\n  middlewareListener = new MiddlewareListener();\n  registry = getRegistry({}, [\n    middlewareListener.getMiddleware(),\n    promiseMiddleware,\n    notificationsMiddleware(),\n    ...middleware.filter((item) => typeof item === 'function'),\n  ]);\n\n  registry.register({ notifications });\n  return registry;\n}\n\nexport function addNewListener({ actionType, callback }) {\n  return middlewareListener.addNew({\n    on: actionType,\n    callback,\n  });\n}\n"],"sourceRoot":""}