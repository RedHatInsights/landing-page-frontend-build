{"version":3,"file":"js/exposed-./SupportCaseWidget.753623a2f3e6ca66d6c9.js","mappings":"wVAIO,MAKMA,EACH,UADGA,EAEG,gBAFHA,EAGC,cAHDA,EAID,WAJCA,EAKH,SCqIV,EAlHmD,KACjD,MAAOC,EAAOC,IAAY,IAAAC,UAAiB,IACrCC,GAAS,EAAAC,EAAA,MACRC,EAAWC,IAAgB,IAAAJ,WAAS,GAgC3C,OALA,IAAAK,YAAU,KACRD,GAAa,GA1BWE,WACxB,MAAMC,QAAcN,EAAOO,KAAKC,WAC1BC,QAAaT,EAAOO,KAAKG,UACzBC,EAAU,CACdC,OAAQ,OACRC,QAAS,CACPC,cAAe,UAAUR,IACzB,eAAgB,mBAChBS,OAAQ,oBAEVC,KAAMC,KAAKC,UAAU,CACnBC,iBAAkB,GAAGV,GAAMW,SAASX,MAAMY,cAI9C,IACE,MAAMC,QAAiBC,MDjD3B,8DCiDsCZ,IAC5B,MAAEd,SAAgByB,EAASE,OACjC1B,EAASD,GACTM,GAAa,E,CACb,MAAOsB,GACPC,QAAQD,MAAM,gCAAiCA,E,GAMjDE,EAAmB,GAClB,IAGD,oCACGzB,EACC,kBAAC0B,EAAA,EAAa,CACZC,KAAM,EACNC,QAAS,CACPlC,EACAA,EACAA,EACAA,EACAA,KAGe,IAAjBC,EAAMkC,OACR,kBAAC,EAAAC,WAAU,CAACC,QAAS,EAAAC,kBAAkBC,IACrC,kBAAC,EAAAC,eAAc,CAACC,KAAM,MACtB,kBAAC,EAAAC,MAAK,CAACC,aAAa,KAAKC,KAAK,MAAI,yBAGlC,kBAAC,EAAAC,eAAc,KACb,kBAAC,EAAAC,MAAK,KACJ,kBAAC,EAAAC,UAAS,gEAKd,kBAAC,EAAAC,OAAM,CACLX,QAAQ,OACRI,KAAM,kBAAC,IAAmB,MAC1BQ,aAAa,MACbC,KAAK,kFAAgF,wBAMzF,kBAACC,EAAA,EAAK,cACO,4BACXd,QAAS,IAAae,SAEtB,kBAACC,EAAA,EAAK,KACJ,kBAACC,EAAAA,GAAE,KACD,kBAACC,EAAAA,GAAE,KAAEvD,GACL,kBAACuD,EAAAA,GAAE,KAAEvD,GACL,kBAACuD,EAAAA,GAAE,KAAEvD,GACL,kBAACuD,EAAAA,GAAE,KAAEvD,GACL,kBAACuD,EAAAA,GAAE,KAAEvD,KAGT,kBAACwD,EAAA,EAAK,KACHvD,GAAOwD,MAAM,ED/GF,GC+GeC,KAAKC,IAAM,OACpC,kBAACL,EAAAA,GAAE,CAACM,IAAKD,EAAEE,IACT,kBAACC,EAAAA,GAAE,CAACC,UAAW/D,GACb,kBAAC,EAAAgD,OAAM,CACLgB,UAAU,eACV3B,QAAQ,OACRI,KAAM,kBAAC,IAAmB,MAC1BQ,aAAa,MACbgB,UAAU,IACVf,KAAM,kDAAkDS,EAAEO,cAEzDP,EAAEO,aAGP,kBAACJ,EAAAA,GAAE,CAACC,UAAW/D,GAA2B2D,EAAEQ,SAC5C,kBAACL,EAAAA,GAAE,CAACC,UAAW/D,GAAyB2D,EAAES,kBAC1C,kBAACN,EAAAA,GAAE,CAACC,UAAW/D,ID9GJqE,EC+GGV,EAAEU,SD9GP,CACrB,aAAwB,kBAAC,EAAAC,MAAK,CAACC,MAAM,OAAOF,GAC5C,WAAsB,kBAAC,EAAAC,MAAK,CAACC,MAAM,UAAUF,GAC7C,aAAwB,kBAAC,EAAAC,MAAK,CAACC,MAAM,QAAQF,GAC7C,UAAqB,kBAAC,EAAAC,MAAK,CAACC,MAAM,QAAQF,IAEtBA,IAAa,KC0GrB,kBAACP,EAAAA,GAAE,CAACC,UAAW/D,GAAqB2D,EAAEa,SDjH5B,IAACH,CCmHd,MAKV,C","sources":["webpack:///./src/utils/consts.tsx","webpack:///./src/components/widgets/support-case-widget.tsx"],"sourcesContent":["import { Label } from '@patternfly/react-core/dist/dynamic/components/Label';\nimport React from 'react';\n\n// for the support cases widget\nexport const url =\n  'https://api.access.stage.redhat.com/support/v1/cases/filter';\n\nexport const MAX_ROWS = 5;\n\nexport const columnNames = {\n  caseId: 'Case ID',\n  issueSummary: 'Issue summary',\n  modifiedBy: 'Modified by',\n  severity: 'Severity',\n  status: 'Status',\n};\n\nexport const severityTypes = {\n  urgent: '1 (Urgent)',\n  high: '2 (High)',\n  normal: '3 (Normal)',\n  low: '4 (Low)',\n};\n\nexport const labelColor = (severity: string) => {\n  const severityMapper = {\n    [severityTypes.urgent]: <Label color=\"red\">{severity}</Label>,\n    [severityTypes.high]: <Label color=\"orange\">{severity}</Label>,\n    [severityTypes.normal]: <Label color=\"blue\">{severity}</Label>,\n    [severityTypes.low]: <Label color=\"grey\">{severity}</Label>,\n  };\n  return severityMapper[severity] ?? '';\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n  Table,\n  TableVariant,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\nimport { Button } from '@patternfly/react-core/dist/dynamic/components/Button';\nimport { EmptyState } from '@patternfly/react-core/dist/dynamic/components/EmptyState';\nimport { EmptyStateBody } from '@patternfly/react-core/dist/dynamic/components/EmptyState';\nimport { EmptyStateIcon } from '@patternfly/react-core/dist/dynamic/components/EmptyState';\nimport { EmptyStateVariant } from '@patternfly/react-core/dist/dynamic/components/EmptyState';\nimport { Stack } from '@patternfly/react-core/dist/dynamic/layouts/Stack';\nimport { StackItem } from '@patternfly/react-core/dist/dynamic/layouts/Stack';\nimport { Title } from '@patternfly/react-core/dist/dynamic/components/Title';\nimport ExternalLinkAltIcon from '@patternfly/react-icons/dist/dynamic/icons/external-link-alt-icon';\nimport HeadsetIcon from '@patternfly/react-icons/dist/dynamic/icons/headset-icon';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport SkeletonTable from '@patternfly/react-component-groups/dist/dynamic/SkeletonTable';\nimport { MAX_ROWS, columnNames, labelColor, url } from '../../utils/consts';\n\nexport type Case = {\n  id: string;\n  caseNumber: string;\n  summary: string;\n  lastModifiedById: string;\n  severity: string;\n  status: string;\n};\n\nconst SupportCaseWidget: React.FunctionComponent = () => {\n  const [cases, setCases] = useState<Case[]>([]);\n  const chrome = useChrome();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const fetchSupportCases = async () => {\n    const token = await chrome.auth.getToken();\n    const user = await chrome.auth.getUser();\n    const options = {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n      body: JSON.stringify({\n        createdBySSOName: `${user?.identity.user?.username}`,\n      }),\n    };\n\n    try {\n      const response = await fetch(url, options);\n      const { cases } = await response.json();\n      setCases(cases);\n      setIsLoading(false);\n    } catch (error) {\n      console.error('Unable to fetch support cases', error);\n    }\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetchSupportCases();\n  }, []);\n\n  return (\n    <>\n      {isLoading ? (\n        <SkeletonTable\n          rows={3}\n          columns={[\n            columnNames.caseId,\n            columnNames.issueSummary,\n            columnNames.modifiedBy,\n            columnNames.severity,\n            columnNames.status,\n          ]}\n        />\n      ) : cases.length === 0 ? (\n        <EmptyState variant={EmptyStateVariant.lg}>\n          <EmptyStateIcon icon={HeadsetIcon} />\n          <Title headingLevel=\"h4\" size=\"lg\">\n            No open support cases\n          </Title>\n          <EmptyStateBody>\n            <Stack>\n              <StackItem>\n                We can&apos;t find any active support cases opened by you.\n              </StackItem>\n            </Stack>\n          </EmptyStateBody>\n          <Button\n            variant=\"link\"\n            icon={<ExternalLinkAltIcon />}\n            iconPosition=\"end\"\n            href=\"https://access.redhat.com/support/cases/#/case/new/get-support?caseCreate=true\"\n          >\n            Open a support case\n          </Button>\n        </EmptyState>\n      ) : (\n        <Table\n          aria-label=\"Support case table widget\"\n          variant={TableVariant.compact}\n        >\n          <Thead>\n            <Tr>\n              <Th>{columnNames.caseId}</Th>\n              <Th>{columnNames.issueSummary}</Th>\n              <Th>{columnNames.modifiedBy}</Th>\n              <Th>{columnNames.severity}</Th>\n              <Th>{columnNames.status}</Th>\n            </Tr>\n          </Thead>\n          <Tbody>\n            {cases?.slice(0, MAX_ROWS).map((c) => (\n              <Tr key={c.id}>\n                <Td dataLabel={columnNames.caseId}>\n                  <Button\n                    className=\"pf-v5-u-pl-0\"\n                    variant=\"link\"\n                    icon={<ExternalLinkAltIcon />}\n                    iconPosition=\"end\"\n                    component=\"a\"\n                    href={`https://access.redhat.com/support/cases/#/case/${c.caseNumber}`}\n                  >\n                    {c.caseNumber}\n                  </Button>\n                </Td>\n                <Td dataLabel={columnNames.issueSummary}>{c.summary}</Td>\n                <Td dataLabel={columnNames.modifiedBy}>{c.lastModifiedById}</Td>\n                <Td dataLabel={columnNames.severity}>\n                  {labelColor(c.severity)}\n                </Td>\n                <Td dataLabel={columnNames.status}>{c.status}</Td>\n              </Tr>\n            ))}\n          </Tbody>\n        </Table>\n      )}\n    </>\n  );\n};\n\nexport default SupportCaseWidget;\n"],"names":["columnNames","cases","setCases","useState","chrome","useChrome","isLoading","setIsLoading","useEffect","async","token","auth","getToken","user","getUser","options","method","headers","Authorization","Accept","body","JSON","stringify","createdBySSOName","identity","username","response","fetch","json","error","console","fetchSupportCases","SkeletonTable","rows","columns","length","EmptyState","variant","EmptyStateVariant","lg","EmptyStateIcon","icon","Title","headingLevel","size","EmptyStateBody","Stack","StackItem","Button","iconPosition","href","Table","compact","Thead","Tr","Th","Tbody","slice","map","c","key","id","Td","dataLabel","className","component","caseNumber","summary","lastModifiedById","severity","Label","color","status"],"sourceRoot":""}