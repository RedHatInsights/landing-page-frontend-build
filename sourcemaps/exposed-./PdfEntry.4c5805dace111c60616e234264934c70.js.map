{"version":3,"file":"js/exposed-./PdfEntry.xxxxxxxxxxxxxxxxxxxx.js","mappings":"mOAYO,MAAMA,EAAuBC,MAAOC,IACzC,MAAMC,EAAmBD,EAAmB,iBAAkB,CAC5DE,OAAQ,MACRC,IAAK,8EAEDC,EAAgBJ,EAAmB,iBAAkB,CACzDE,OAAQ,MACRC,IAAK,oEAGDE,EAAkBL,EAAmB,iBAAkB,CAC3DE,OAAQ,MACRC,IAAK,gCAQP,aALmBG,QAAQC,IAAI,CAC7BN,EACAG,EACAC,GAES,EA8Cb,EAvCiB,EACfG,gBAIA,MAAM,KAAEC,GAASD,EAEjB,OACE,oCACE,wCACA,yBAAKE,UAAU,gBACb,kBAAC,IAAK,KACJ,kBAAC,IAAK,KACJ,kBAAC,EAAAC,GAAE,KACD,kBAAC,EAAAC,GAAE,WACH,kBAAC,EAAAA,GAAE,sBAGP,kBAAC,IAAK,KACHH,EAAKI,MAAM,EAAG,GAAGC,KAAI,CAACC,EAASC,IAC9BD,EAAQD,KAAI,CAACG,EAAKC,IAChB,kBAAC,EAAAP,GAAE,CAACQ,IAAK,GAAGH,KAAKE,KAEf,kBAAC,EAAAE,GAAE,KAAEH,GAAKI,IACV,kBAAC,EAAAD,GAAE,KAAEH,EAAIK,oBAMnB,6BACE,2CACA,6BAAMC,KAAKC,UAAUf,EAAK,GAAI,KAAM,MAI3C,C","sources":["webpack:///./src/moduleEntries/PdfEntry.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport React from 'react';\nimport type { AxiosRequestConfig } from 'axios';\nimport { Table, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table';\n\ntype CreateAxiosRequest<T = any> = (\n  service: string,\n  config: AxiosRequestConfig\n) => Promise<T>;\n\ntype FetchData = (createAsyncRequest: CreateAxiosRequest) => Promise<any>;\n\nexport const fetchData: FetchData = async (createAsyncRequest) => {\n  const requestGenerated = createAsyncRequest('chrome-service', {\n    method: 'GET',\n    url: '/api/chrome-service/v1/static/beta/stage/services/services-generated.json',\n  });\n  const requestStatic = createAsyncRequest('chrome-service', {\n    method: 'GET',\n    url: '/api/chrome-service/v1/static/beta/stage/services/services.json',\n  });\n\n  const requestWithAuth = createAsyncRequest('chrome-service', {\n    method: 'GET',\n    url: '/api/chrome-service/v1/user',\n  });\n\n  const data = await Promise.all([\n    requestGenerated,\n    requestStatic,\n    requestWithAuth,\n  ]);\n  return data;\n};\n\ntype AsyncState<T = any> = {\n  data: T;\n};\n\nconst PdfEntry = ({\n  asyncData,\n}: {\n  asyncData: AsyncState<{ description: string }[][]>;\n}) => {\n  const { data } = asyncData;\n\n  return (\n    <>\n      <h1>Services</h1>\n      <div className=\"pf-v5-u-m-xl\">\n        <Table>\n          <Thead>\n            <Tr>\n              <Th>ID</Th>\n              <Th>Description</Th>\n            </Tr>\n          </Thead>\n          <Tbody>\n            {data.slice(0, 2).map((service, i) =>\n              service.map((row, h) => (\n                <Tr key={`${i}-${h}`}>\n                  {/* @ts-ignore */}\n                  <Td>{row?.id}</Td>\n                  <Td>{row.description}</Td>\n                </Tr>\n              ))\n            )}\n          </Tbody>\n        </Table>\n        <div>\n          <h1>user data?!</h1>\n          <pre>{JSON.stringify(data[2], null, 2)}</pre>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default PdfEntry;\n"],"names":["fetchData","async","createAsyncRequest","requestGenerated","method","url","requestStatic","requestWithAuth","Promise","all","asyncData","data","className","Tr","Th","slice","map","service","i","row","h","key","Td","id","description","JSON","stringify"],"sourceRoot":""}